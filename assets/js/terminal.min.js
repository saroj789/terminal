var Terminal = function (options) {
  var self = this;
  this.typingSpeed = 100;
  this.lineCount = 0;
  this.pause = 1000;

  if (!options.container || !options.commands) {
    console.warn("Terminal: Missing required container");
  }

  for (var key in options) {
    this[key] = options[key];
  }

  // styling is added in terminal.min.css for terminal text
  
  this.newLine = function () {
    var command = self.commands[self.lineCount];
    var tl = document.createElement("div");
    tl.classList.add("slick-terminal-line");
    tl.innerHTML =
      '<span class="slick-terminal-caret">></span>' +
      '<span class="slick-terminal-text"></span>';
    self.container.appendChild(tl);

    if (self.lineBegin) {
      self.lineBegin();
    }

    var terminalText = tl.querySelector(".slick-terminal-text");

    var cursor = document.createElement("span");
    cursor.classList = "slick-terminal-cursor slick-terminal-blink";
    tl.appendChild(cursor);

    function nextTerminalLine() {
      self.lineCount++;

      if (self.commands[self.lineCount]) {
        if (cursor) {
          tl.removeChild(cursor);
        }

        self.newLine();
      } else if (self.loop) {
        if (cursor) {
          tl.removeChild(cursor);
        }

        self.lineCount = 0;
        self.newLine();
      } else if (self.done) {
        self.done();
      }
    }

    setTimeout(function () {
      if (command.typing) {
        cursor.classList.remove("slick-terminal-blink");
        var commandTextArray = command.text.split("");
        var i = 0;
        var typingInterval = setInterval(function () {
          terminalText.innerHTML += commandTextArray[i];
          i++;

          if (i === commandTextArray.length) {
            clearInterval(typingInterval);
            cursor.classList.add("slick-terminal-blink");
            nextTerminalLine();
          }
        }, self.typingSpeed);
      } else {
        terminalText.innerHTML += command.text;
        nextTerminalLine();
      }
    }, self.pause);
  };

  self.newLine();
};
